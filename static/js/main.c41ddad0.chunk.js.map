{"version":3,"sources":["component/QuestionPanel/QuestionPanel.jsx","component/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","minHeight","maxHeight","textAlign","padding","question","color","fontSize","progressRoot","height","backgroundColor","lighten","borderRadius","bar","QuestionPanel","nextQuestion","total","questionNo","progress","checkUserAnswer","maxScore","score","useState","answered","setAnswered","message","setMessage","handleAnswer","ans","decodeURIComponent","classes","className","variant","value","Card","CardActionArea","CardContent","Typography","component","gutterBottom","Divider","CardActions","map","key","Button","onClick","disabled","valueBuffer","Home","state","questions","data","current_question","current_question_no","total_question_no","length","currectAnswered","wrongAnswered","current","setState","userAns","_score","toFixed","_maxScore","this","Component","theme","createMuiTheme","palette","primary","light","main","dark","secondary","typography","useNextVariants","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c41ddad0.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport {lighten, makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport StarFillIcon from '@material-ui/icons/StarOutlined';\nimport StarOutlineIcon from '@material-ui/icons/StarBorderOutlined';\nimport BorderLinearProgress from '@material-ui/core/LinearProgress'\nimport './QuestionPanel.css';\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: 700,\n    minHeight:350,\n    maxHeight:400,\n    textAlign:'left',\n    padding:50\n  },\n  question:{\n    color:'black',\n    fontSize: '2rem',\n  },\n\n  progressRoot: {\n    height: 10,\n    backgroundColor: lighten('#ff6c5c', 0.5),\n    borderRadius: 20,\n\n  },\n  bar: {\n    height: 16,\n    borderRadius: 20,\n  },\n});\n\nexport default function QuestionPanel({question, nextQuestion, total, questionNo, progress, checkUserAnswer,maxScore, score}) {\n  const [answered,setAnswered] = useState('');\n  const [message,setMessage]=useState(''); \n  \n  const handleAnswer = (ans) =>{\n    setAnswered(ans);\n    checkUserAnswer(ans);\n    if(decodeURIComponent(question['correct_answer'])==ans){\n      setMessage('Correct!')\n    }\n    else{\n      setMessage('InCorrect!')\n    }\n\n  }\n\n  function difficultyLevelChecker (){\n    if(question['difficulty'] === 'hard'){\n      return (\n        <>\n       <StarFillIcon/>\n       <StarFillIcon/>\n       <StarFillIcon/>\n       </>\n      )\n    }\n    else if (question['difficulty'] === 'medium'){\n      return (\n        <>\n       <StarFillIcon/>\n       <StarFillIcon/>\n       <StarOutlineIcon/>\n       </>\n      )\n    }\n    else if (question['difficulty'] === 'easy'){\n      return (\n        <>\n       <StarFillIcon/>\n       <StarOutlineIcon/>\n       <StarOutlineIcon/>\n       </>\n      )\n    } \n    else {\n      return (\n        <>\n       <StarOutlineIcon/>\n       <StarOutlineIcon/>\n       <StarOutlineIcon/>\n       </>\n      )\n    } \n   }\n  const classes = useStyles();\n  return (<>\n        <div className={classes.progressRoot}>\n\n          <BorderLinearProgress\n              className={classes.bar}\n              variant=\"determinate\"\n              color=\"secondary\"\n              value={progress}\n            />\n        </div>\n\n        <Card className={classes.root}>\n          <CardActionArea>  \n            <CardContent>\n              <Typography variant=\"h5\" component=\"h3\">\n                Question {questionNo} of {total}\n              </Typography>\n              <Typography gutterBottom variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {decodeURIComponent(question['category'])}\n              </Typography>\n              { difficultyLevelChecker()}\n              <Divider/>\n              <Typography  variant=\"body1\" color=\"textSecondary\" component=\"p\" className={classes.question}>\n                {decodeURIComponent(question['question'])}\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            { question['incorrect_answers'].map(key =>\n                <Button variant={answered === decodeURIComponent(key)? \"contained\" :\"outlined\"} \n                        color=\"primary\" key={decodeURIComponent(key)} \n                        onClick={()=>handleAnswer(decodeURIComponent(key))}\n                        disabled={answered!==''?true : false}\n                >\n                        {decodeURIComponent(key)}\n                </Button>\n              )\n            }\n            <Button variant={answered === decodeURIComponent(question['correct_answer'])? \"contained\" :\"outlined\"} \n                    color=\"primary\" key={decodeURIComponent(question['correct_answer'])} \n                    onClick={()=>handleAnswer(decodeURIComponent(question['correct_answer']))}\n                    disabled={answered!==''?true : false}\n            >\n                  {decodeURIComponent(question['correct_answer'])}\n            </Button>\n          </CardActions>\n          <Typography variant=\"h5\" component=\"h3\" className=\"message\">\n              {answered && message}\n          </Typography>\n            \n          {answered!=='' && progress !==100? \n            <Button variant=\"contained\" \n              className=\"next-button\" \n              color=\"secondary\" key=\"next\" onClick={()=>{nextQuestion(); setAnswered('');}} \n              >\n                Next Question\n          </Button>\n          \n          : ''}\n            \n\n        </Card>\n        <div className=\"score-wrapper\">\n          <p>Score: {score} %</p>\n          <p>MaxScore: {maxScore} %</p> \n        </div>\n\n\n        <div className={classes.progressRoot}>\n          <BorderLinearProgress\n              className={classes.bar}\n              variant=\"determinate\"\n              color=\"secondary\"\n              value={score}\n              valueBuffer={maxScore}\n            />\n        </div>\n    </>\n  );\n}","import React, {Component}from 'react';\nimport data from '../data/quiz-data.json';\nimport QuestionPanel from '../QuestionPanel/QuestionPanel';\nimport './Home.css';\n\n\nclass Home extends Component {\n    state = { \n        questions : data,\n        current_question:null,\n        current_question_no : 1,\n        total_question_no:data.length,\n        progress:5,\n        score:0,\n        maxScore:0,\n        currectAnswered:0,\n        wrongAnswered:0,\n\n     }\n     componentDidMount(){\n         this.setState({current_question:this.state.questions[0]})\n     }\n     nextQuestion = () =>{\n        let current = this.state.current_question_no+1;\n        if(current <= this.state.total_question_no){\n            this.setState({current_question_no:current})\n            this.setState({current_question:this.state.questions[current-1]})\n\n           this.setState({progress:(current/this.state.total_question_no)* 100});\n        }\n     }\n     checkUserAnswer = (userAns) =>{\n        const {current_question,current_question_no ,currectAnswered,wrongAnswered , total_question_no} = this.state;\n        if(decodeURIComponent(current_question['correct_answer'])==userAns){\n            this.setState({currectAnswered:currectAnswered+1});\n\n            const _score =(((currectAnswered +1) / (current_question_no)) * 100).toFixed(2);\n            this.setState({score:_score});\n        }\n        else{\n            this.setState({wrongAnswered:wrongAnswered+1});\n\n            const _score =(((currectAnswered) / (current_question_no)) * 100).toFixed(2);\n            this.setState({score:_score});\n        }\n\n        let _maxScore = (((current_question_no) / (total_question_no)) * 100).toFixed(2);\n        this.setState({maxScore:_maxScore})\n\n        \n     }\n\n    render() { \n        return (\n\n            <div className=\"question-panel-wrapper\">\n                {this.state.current_question !==null?\n                    <QuestionPanel \n                        question={this.state.current_question}\n                        nextQuestion={this.nextQuestion}\n                        total={this.state.total_question_no}\n                        questionNo={this.state.current_question_no}\n                        progress={this.state.progress}\n                        checkUserAnswer={this.checkUserAnswer}\n                        maxScore={this.state.maxScore}\n                        score={this.state.score}\n                    />\n                :\"\"\n                }\n                \n            </div>\n          );\n    }\n}\n \nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from './component/Home/Home';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';  \n\nconst theme = createMuiTheme({\n  palette: {\n     primary: {\n        light: '#fff',\n        main: '#e7643d',\n        dark: '#000'\n     },\n     secondary: {\n       main: '#f44336',\n     },\n  },\n  typography: { \n     useNextVariants: true\n  }\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <MuiThemeProvider theme = { theme }>\n          <Home/>\n       </MuiThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}